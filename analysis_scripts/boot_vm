#!/bin/bash

DEBUG=""
SHARE=""

display_help() {
    echo "Usage: $0 [option...] " >&2
    echo
    echo "    -d, --debug               enables QEMU debug mode (connect with gdb, port 1234)"
    echo "    -h, --help                Display help message"
    echo
}


while true; do
    if [ $# -eq 0 ];then
	echo $#
	break
    fi
    case "$1" in
        -h | --help)
            display_help
            exit 0
            ;;
        -d | --debug)
            DEBUG="-s"
            shift 1
            ;;
        --debug-boot)
            DEBUG="-s -S"
            echo "GDB doesn't handle CPU mode changes, so good luck..."
            shift 1
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            exit 1
            ;;
        *)  # No more options
            break
            ;;
    esac
done

if [ ! -f "$KERNEL/vmlinux" ]; then
    build_kernel --debug
fi

if [ ! -f "$IMAGE/$RELEASE.img" ]; then
    cd $IMAGE && ./create_image.sh -d $RELEASE
else
    update_fstab
fi

if [ ! -z "$WORKSPACE" ]; then
    SHARE="-fsdev local,security_model=passthrough,id=fsdev1,path=$WORKSPACE -device virtio-9p-pci,id=fs1,fsdev=fsdev1,mount_tag=sharedworkspace"
fi

cd $HOME
KERNELRELEASE=$(cat $KERNEL/include/config/kernel.release)
qemu-system-x86_64 \
  -kernel $KERNEL/arch/x86/boot/bzImage \
  -append "console=ttyS0 root=/dev/sda earlyprintk=serial nokaslr nokpti nosmep nosmap selinux=0 net.ifnames=0 biosdevname=0"\
  -hda $IMAGE/$RELEASE.img \
  -fsdev local,security_model=passthrough,id=fsdev0,path=$KERNEL -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=kernelbuild \
  $SHARE \
  -net user,hostfwd=tcp::10021-:22,hostfwd=tcp::5678-:1234 -net nic \
  -enable-kvm \
  -nographic \
  -m 2G \
  $DEBUG \
  2>&1 | tee vm.log
